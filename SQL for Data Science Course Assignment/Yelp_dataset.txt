Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 	10000
ii. Business table = 	10000
iii. Category table =	10000
iv. Checkin table = 	10000
v. elite_years table = 	10000
vi. friend table =  	10000
vii. hours table = 	10000
viii. photo table = 	10000
ix. review table =	10000
x. tip table = 		10000
xi. user table = 	10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. 	Business =			10000 	(id)
ii. 	Hours =				1562 	(business_id)
iii. 	Category =			2643    (business_id)
iv. 	Attribute =			1115	(business_id)
v. 	Review =			10000	(id),		8090 (business_id), 	9581 (user_id)
vi. 	Checkin = 			493 	(business_id)
vii. 	Photo =				10000	(id),		6493 (business_id)
viii. 	Tip = 				537	(user_id),      3979 (business_id)
ix. 	User = 				10000	(id)
x. 	Friend = 			11	(user_id)
xi. 	Elite_years =	                2780	(user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:
		
		SELECT id, name, review_count, yelping_since, useful, funny, cool, fans, average_stars, 
			   compliment_hot, compliment_more, compliment_profile, compliment_cute, compliment_list, 
			   compliment_note, compliment_plain, compliment_cool, compliment_funny, compliment_writer, compliment_photos
		FROM user
		WHERE id is null
				OR name is NULL
				OR review_count is NULL
				OR yelping_since is NULL
				OR useful is NULL
				OR funny is NULL
				OR cool is NULL
				OR fans is NULL
				OR average_stars is NULL
				OR compliment_hot is NULL
				OR compliment_more is NULL
				OR compliment_profile is NULL
				OR compliment_cute is NULL
				OR compliment_list is NULL
				OR compliment_note is NULL
				OR compliment_plain is NULL
				OR compliment_cool is NULL
				OR compliment_funny is NULL
				OR compliment_writer is NULL
				OR compliment_photos is NULL;
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0	max: 5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995

		

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
		
		SELECT city, sum(review_count)
		FROM business
		GROUP BY city
		ORDER BY sum(review_count) DESC;
	
	Copy and Paste the Result Below:
	
		+-----------------+-------------------+
		| city            | sum(review_count) |
		+-----------------+-------------------+
		| Las Vegas       |             82854 |
		| Phoenix         |             34503 |
		| Toronto         |             24113 |
		| Scottsdale      |             20614 |
		| Charlotte       |             12523 |
		| Henderson       |             10871 |
		| Tempe           |             10504 |
		| Pittsburgh      |              9798 |
		| MontrÃ©al       |              9448 |
		| Chandler        |              8112 |
		| Mesa            |              6875 |
		| Gilbert         |              6380 |
		| Cleveland       |              5593 |
		| Madison         |              5265 |
		| Glendale        |              4406 |
		| Mississauga     |              3814 |
		| Edinburgh       |              2792 |
		| Peoria          |              2624 |
		| North Las Vegas |              2438 |
		| Markham         |              2352 |
		| Champaign       |              2029 |
		| Stuttgart       |              1849 |
		| Surprise        |              1520 |
		| Lakewood        |              1465 |
		| Goodyear        |              1155 |
		+-----------------+-------------------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT stars as [Star Rating], COUNT(stars) AS [Count]
	FROM business b
	WHERE city = 'Avon'
	GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

	+-------------+-------+
	| Star Rating | Count |
	+-------------+-------+
	|         1.5 |     1 |
	|         2.5 |     2 |
	|         3.5 |     3 |
	|         4.0 |     2 |
	|         4.5 |     1 |
	|         5.0 |     1 |
	+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

	SELECT stars as [Star Rating], COUNT(stars) AS [Count]
	FROM business b
	WHERE city = 'Beachwood'
	GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
	+-------------+-------+
	| Star Rating | Count |
	+-------------+-------+
	|         2.0 |     1 |
	|         2.5 |     1 |
	|         3.0 |     2 |
	|         3.5 |     2 |
	|         4.0 |     1 |
	|         4.5 |     2 |
	|         5.0 |     5 |
	+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
		SELECT name, review_count
		FROM user
		ORDER BY review_count DESC
		LIMIT 3;
		
	Copy and Paste the Result Below:
		
		+--------+--------------+
		| name   | review_count |
		+--------+--------------+
		| Gerald |         2000 |
		| Sara   |         1629 |
		| Yuri   |         1339 |
		+--------+--------------+


8. Does posing more reviews correlate with more fans?
		
		No

	Please explain your findings and interpretation of the results:

		SQL code:
			select name, review_count, fans
			from user
			order by fans desc
			limit 10
		
		Results:
			+-----------+--------------+------+
			| name      | review_count | fans |
			+-----------+--------------+------+
			| Amy       |          609 |  503 |
			| Mimi      |          968 |  497 |
			| Harald    |         1153 |  311 |
			| Gerald    |         2000 |  253 |
			| Christine |          930 |  173 |
			| Lisa      |          813 |  159 |
			| Cat       |          377 |  133 |
			| William   |         1215 |  126 |
			| Fran      |          862 |  124 |
			| Lissa     |          834 |  120 |
			+-----------+--------------+------+

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: More reviews with the word "love"

	
	SQL code used to arrive at answer:
		
		SELECT 'love' Word, COUNT(text) [Total Count]
		FROM review
		WHERE text LIKE '%love%'
		UNION
		SELECT 'hate' Word, COUNT(text) [Total Count]
		FROM review
		WHERE text LIKE '%hate%'
		
		+------+-------------+
		| Word | Total Count |
		+------+-------------+
		| hate |         232 |
		| love |        1780 |
		+------+-------------+

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
		SELECT name, fans
		FROM user
		ORDER BY fans DESC
		LIMIT 10;
	
	Copy and Paste the Result Below:
		+-----------+------+
		| name      | fans |
		+-----------+------+
		| Amy       |  503 |
		| Mimi      |  497 |
		| Harald    |  311 |
		| Gerald    |  253 |
		| Christine |  173 |
		| Lisa      |  159 |
		| Cat       |  133 |
		| William   |  126 |
		| Fran      |  124 |
		| Lissa     |  120 |
		+-----------+------+

	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	
	The 2-3 stars group tend to work more hours than the 2-3 star group.

ii. Do the two groups you chose to analyze have a different number of reviews?
         
	Yes, 4-5 star group has more reviwes than the other group.        

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	Both groups are in different postal codes.

SQL code used for analysis:

		SELECT B.name,
		B..review_count,
		H.hours,
		postal_code,
		CASE
			WHEN hours LIKE "%monday%" THEN 1
			WHEN hours LIKE "%tuesday%" THEN 2
			WHEN hours LIKE "%wednesday%" THEN 3
			WHEN hours LIKE "%thursday%" THEN 4
			WHEN hours LIKE "%friday%" THEN 5
			WHEN hours LIKE "%saturday%" THEN 6
			WHEN hours LIKE "%sunday%" THEN 7
		END AS ord,
		CASE
			WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
			WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 stars'
		END AS star_rating
		FROM business B INNER JOIN hours H
		ON B.id = H.business_id
		INNER JOIN category C
		ON C.business_id = B.id
		WHERE (B.city == 'Las Vegas'
		AND
		C.category LIKE 'food')
		AND
		(B.stars BETWEEN 2 AND 3
		OR
		B.stars BETWEEN 4 AND 5)
		GROUP BY stars,ord
		ORDER BY ord,star_rating ASC;
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
	i. Difference 1:
	
		On average, the businesses that are open tend to have more reviews than ones that
		are closed.
		
			Open:   AVG(review_count) = 31.757
			Closed: AVG(review_count0 = 23.198
	
	
	ii. Difference 2:
	
		The average star rating is higher for businesses that are open than
		businesses that are closed.
	
			Open:   AVG(stars) = 3.679
			Closed: AVG(stars) = 3.520
	
	
	SQL code used for analysis:
	
		SELECT COUNT(DISTINCT(id)),
			   AVG(review_count),
			   SUM(review_count),
			   AVG(stars),
			   is_open
		FROM business
		GROUP BY is_open;

